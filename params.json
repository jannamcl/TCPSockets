{"name":"TCPSockets","tagline":"A simple demonstration of TCP Sockets in Java.","body":"/*\r\n* ServerApplication.java, ClientApplication.java\r\n* @author - Janna McLaughlin\r\n* \r\n* This is a simple application that runs a TCP Network Server.\r\n* It accepts a connection from a Client and allows the Client to send\r\n* the following byte data through a socket:\r\n* Version (1 byte), Message Type (2 byte integer), User ID (4 byte integer), Payload (variable\r\n* length ASCII string).\r\n* The server then prints out this data.\r\n* \r\n* If given more time than 24 hours, this could turn into a game server.\r\n* Things to add include:\r\n* Threads \r\n* - multi-threading the server would allow for multiple clients to connect at once, send data,\r\n*   and to print that data.\r\n*   it could also allow the server to send/receive data at the same time, all while keeping a \r\n*   player engaged in a running game\r\n*   The server must also update game states, and should not always have to worry about \r\n*   receiving client data. It should be able to update without lag and then send off any \r\n*   updates to clients.\r\n* - multi-threading the client would allow for sending and receiving data at the same time and \r\n*   client-side updates of the game state\r\n* I would also include an elegant way to stop the server.\r\n*/\r\n\r\nTo run the program:\r\n\r\nRun ServerApplication.java first, then run ClientApplication.\r\nThe client application should connect to the server.\r\nIn ClientApplication, you will be prompted for an ASCII String. \r\nAfter entering a string, the client application connects to the server,\r\nsending data through the socket. The server then reads the data and prints.\r\nThe server then continues to prompt.\r\n\r\n//Janna McLaughlin","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}